#필요 라이브러리 선언
import csv
import matplotlib.pyplot as plt
import tensorflow as tf
import pandas as pd


# 파일명에 맞게 수정
df = pd.read_csv("test0.csv", encoding='utf-8')  # 또는 'cp949'일 수도 있음
df.head()



# 숫자만 남기고 처리, 원하는 행 명칭 넣기
cols_to_convert = ['등록인구 (명).1', '등록인구 (명).2']
for col in cols_to_convert:
    df[col] = pd.to_numeric(df[col].str.replace(',', ''), errors='coerce')



#폰트 설정 구역
# 1. 한글 폰트 설치 (이미 했다면 생략 가능)
!apt-get -y install fonts-nanum
!fc-cache -fv

# 정확하게 폰트를 시스템에 등록한 뒤 전역 설정하는 방법
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# 1. 폰트 경로 직접 등록
font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'
fm.fontManager.addfont(font_path)  # 🔑 폰트 등록

# 2. 등록한 폰트를 가져오기
nanum_font = fm.FontProperties(fname=font_path).get_name()
print(f"matplotlib이 인식한 폰트 이름: {nanum_font}")

# 3. 전역 설정에 정확하게 반영
plt.rcParams['font.family'] = nanum_font
plt.rcParams['axes.unicode_minus'] = False



#시각화 시작

plt.figure(figsize=(10, 5))
plt.plot(df['시점'], df['등록인구 (명).1'], marker='o')
plt.title('도시 주택')
plt.xlabel('연도')
plt.ylabel('등록인구 (명)')
plt.grid(True)
plt.show()


#시각화 시작
plt.figure(figsize=(10, 5))
plt.bar(df['시점'], df['등록인구 (명).1'])
plt.title('연도별 등록인구 추이')
plt.xlabel('연도')
plt.ylabel('등록인구 (명)')
plt.grid(axis='y')
plt.show()


#시각화 시작

plt.figure(figsize=(10, 5))
plt.scatter(df['시점'], df['등록인구 (명).1'], marker='o')
plt.title('도시 주택')
plt.xlabel('연도')
plt.ylabel('등록인구 (명)')
plt.grid(True)
plt.show()



# 시각화
plt.figure(figsize=(10, 5))
plt.plot(df['시점'], df['등록인구 (명).1'], marker='o', color='blue', label='남자')
plt.plot(df['시점'], df['등록인구 (명).2'], marker='s', color='orange', label='여자')

plt.title('도시 주택 등록인구 추이')
plt.xlabel('연도')
plt.ylabel('등록인구 (명)')
plt.grid(True)
plt.legend(loc='upper left')  # 범례 표시
plt.tight_layout()
plt.show()



# 데이터 기반 예측


# x_data와 y_data 리스트에 필요한 데이터 추가
x_data = []
y_data = []


import math
for row in df.itertuples():
    try:
        x = float(row[1])
        y = float(row[2])
        if math.isnan(x) or math.isnan(y):
            continue  # nan이면 건너뜀
        x_data.append(x)
        y_data.append(y)
    except (ValueError, TypeError):
        continue  # 변환 안 되면 건너뜀



print(x_data[:5])  # 처음 몇 개 확인
print(y_data[:5])


#데이터 크기 정렬
from sklearn.preprocessing import MinMaxScaler
import numpy as np

# 1. 리스트를 numpy 배열로 변환
x_array = np.array(x_data).reshape(-1, 1)
y_array = np.array(y_data).reshape(-1, 1)

# 2. 스케일러 생성 및 학습
x_scaler = MinMaxScaler()
y_scaler = MinMaxScaler()

x_scaled = x_scaler.fit_transform(x_array)
y_scaled = y_scaler.fit_transform(y_array)



import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

# 3. 모델 구성
model = Sequential([
    Dense(64, activation='relu', input_shape=(1,)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')



model.fit(x_scaled, y_scaled, epochs=100, verbose=1)




# 3. 예측
y_pred_scaled = model.predict(x_scaled)
y_pred = y_scaler.inverse_transform(y_pred_scaled)
# 4. 시각화
plt.figure(figsize=(10, 6))

# 실제 데이터 (점)
plt.scatter(x_data, y_data, label='실제 세대수', color='black')

# 예측값 (선)
plt.plot(x_data, y_pred, label='예측 세대수', color='red', linewidth=2)
plt.title('딥러닝 기반 세대수 예측')
plt.xlabel('연도')
plt.ylabel('세대수')
plt.grid(True)
plt.legend()
plt.show()





# 1. 예측 대상 입력값 준비
x_2030 = np.array([[2030]])
# 2. 스케일링
x_2030_scaled = x_scaler.transform(x_2030)
# 3. 예측
y_2030_scaled = model.predict(x_2030_scaled)
# 4. 스케일 복원 (inverse transform)
y_2030 = y_scaler.inverse_transform(y_2030_scaled)
# 5. 결과 출력
print(f"🌟 2030년 예측 세대수: {y_2030[0][0]:,.0f} 세대")
