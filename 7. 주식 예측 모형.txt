import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import os
%matplotlib inline
warnings.filterwarnings('ignore')
plt.rcParams['font.family'] = 'NanumGothic'
import seaborn as sns
import csv


# GitHub URL로 CSV 데이터 불러오기
url = 'https://raw.githubusercontent.com/able0220/able0220/refs/heads/main/AAPL.csv'
data = pd.read_csv(url, encoding='utf-8')  # 필요한 경우 인코딩 설정


data.dropna()


# 날짜를 인덱스로 설정하고 'Close' 가격만 사용
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)
stock_prices = data['Close'].values.reshape(-1, 1)

print(stock_prices)


from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
stock_prices_scaled = scaler.fit_transform(stock_prices)



def create_sequences(data, sequence_length):
    x, y = [], []
    for i in range(len(data) - sequence_length - 1):
        x.append(data[i:(i + sequence_length), 0])
        y.append(data[i + sequence_length, 0])
    return np.array(x), np.array(y)

sequence_length = 50
x, y = create_sequences(stock_prices_scaled, sequence_length)
x = np.reshape(x, (x.shape[0], x.shape[1], 1))  # LSTM에 맞게 데이터 차원 변경



split = int(0.8 * len(x))
x_train, x_test = x[:split], x[split:]
y_train, y_test = y[:split], y[split:]


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(sequence_length, 1)),
    Dropout(0.2),
    LSTM(50),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')




# 모델 훈련
model.fit(x_train, y_train, epochs=30, batch_size=32)


#출력을 위한 정리
import matplotlib.pyplot as plt

predicted_stock_price = model.predict(x_test)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)  # 예측 결과를 원래 스케일로 되돌림
real_stock_price = scaler.inverse_transform(y_test.reshape(-1, 1))





#250까지 데이터 예측(기형ort pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import os
%matplotlib inline
warnings.filterwarnings('ignore')
plt.rcParams['font.family'] = 'NanumGothic'
import seaborn as sns
import csv


# GitHub URL로 CSV 데이터 불러오기
url = 'https://raw.githubusercontent.com/able0220/able0220/refs/heads/main/AAPL.csv'
data = pd.read_csv(url, encoding='utf-8')  # 필요한 경우 인코딩 설정


data.dropna()


# 날짜를 인덱스로 설정하고 'Close' 가격만 사용
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)
stock_prices = data['Close'].values.reshape(-1, 1)

print(stock_prices)


from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
stock_prices_scaled = scaler.fit_transform(stock_prices)



def create_sequences(data, sequence_length):
    x, y = [], []
    for i in range(len(data) - sequence_length - 1):
        x.append(data[i:(i + sequence_length), 0])
        y.append(data[i + sequence_length, 0])
    return np.array(x), np.array(y)

sequence_length = 50
x, y = create_sequences(stock_prices_scaled, sequence_length)
x = np.reshape(x, (x.shape[0], x.shape[1], 1))  # LSTM에 맞게 데이터 차원 변경



split = int(0.8 * len(x))
x_train, x_test = x[:split], x[split:]
y_train, y_test = y[:split], y[split:]


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(sequence_length, 1)),
    Dropout(0.2),
    LSTM(50),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')




# 모델 훈련
model.fit(x_train, y_train, epochs=30, batch_size=32)


#출력을 위한 정리
import matplotlib.pyplot as plt

predicted_stock_price = model.predict(x_test)
predicted_stock_price = scaler.inverse_transform(predicted_stock_price)  # 예측 결과를 원래 스케일로 되돌림
real_stock_price = scaler.inverse_transform(y_test.reshape(-1, 1))





#250까지 데이터 예측(기영이)
plt.plot(real_stock_price[:250], color='red', label='Real Apple Stock Price')
plt.plot(predicted_stock_price[:250], color='blue', label='Predicted Apple Stock Price')
plt.title('Apple Stock Price Prediction (up to 250)')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()


#300 까지 전체 데이터
plt.plot(real_stock_price, color='red', label='Real Apple Stock Price')
plt.plot(predicted_stock_price, color='blue', label='Predicted Apple Stock Price')
plt.title('Apple Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
