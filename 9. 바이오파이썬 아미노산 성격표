!pip install biopython


##################################################################################################


# 코돈을 활용한 이름 암호 제작
from Bio.Seq import Seq
from Bio.SeqUtils import seq3

# 1. 문자와 대응하는 아미노산 및 코돈 설정 (필요한 문자를 모두 추가)
codon_map = {
    'A': 'GCT',  # Alanine
    'B': 'AAT',  # Asparagine (임의의 할당)
    'C': 'TGC',  # Cysteine
    'D': 'GAT',  # Aspartic Acid
    'E': 'GAG',  # Glutamic Acid
    'F': 'TTT',  # Phenylalanine
    'G': 'GGT',  # Glycine
    'H': 'CAT',  # Histidine
    'I': 'ATA',  # Isoleucine
    'J': 'ATC',  # Isoleucine (J는 일반적으로 사용되지 않지만, I와 동일하게 처리)
    'K': 'AAA',  # Lysine
    'L': 'CTG',  # Leucine
    'M': 'ATG',  # Methionine
    'N': 'AAC',  # Asparagine
    'O': 'CCG',  # Proline (임의의 할당)
    'P': 'CCT',  # Proline
    'Q': 'CAA',  # Glutamine
    'R': 'CGT',  # Arginine
    'S': 'AGT',  # Serine
    'T': 'ACC',  # Threonine
    'U': 'TGA',  # Stop codon (U는 일반적으로 사용되지 않지만, 여기서 TGA를 사용)
    'V': 'GTT',  # Valine
    'W': 'TGG',  # Tryptophan
    'X': 'TAA',  # Stop codon (X는 stop codon을 나타냄)
    'Y': 'TAC',  # Tyrosine
    'Z': 'GAA',  # Glutamic Acid (임의의 할당)
    ' ': 'TAA',  # Stop codon to represent space
}

# 코돈에서 문자로 역변환하기 위한 사전 생성
reverse_codon_map = {v: k for k, v in codon_map.items()}


##################################################################################################


# 2. 예시 단백질 서열
protein_sequence = "SONGDAYUN" #본인 이름 영어 대문자로 입력


##################################################################################################


# 3. 단백질 서열을 DNA 염기서열로 변환
dna_sequence = "".join(codon_map[char] for char in protein_sequence)
print(f"DNA Sequence from protein '{protein_sequence}': {dna_sequence}")


##################################################################################################





from Bio.Seq import Seq

# 문자와 대응하는 아미노산 및 코돈 설정 (필요한 문자를 모두 추가)
codon_map = {
    'A': 'GCT',  # Alanine
    'B': 'AAT',  # Asparagine (임의의 할당)
    'C': 'TGC',  # Cysteine
    'D': 'GAT',  # Aspartic Acid
    'E': 'GAG',  # Glutamic Acid
    'F': 'TTT',  # Phenylalanine
    'G': 'GGT',  # Glycine
    'H': 'CAT',  # Histidine
    'I': 'ATA',  # Isoleucine
    'J': 'ATC',  # Isoleucine (J는 일반적으로 사용되지 않지만, I와 동일하게 처리)
    'K': 'AAA',  # Lysine
    'L': 'CTG',  # Leucine
    'M': 'ATG',  # Methionine
    'N': 'AAC',  # Asparagine
    'O': 'CCG',  # Proline (임의의 할당)
    'P': 'CCT',  # Proline
    'Q': 'CAA',  # Glutamine
    'R': 'CGT',  # Arginine
    'S': 'AGT',  # Serine
    'T': 'ACC',  # Threonine
    'U': 'TGA',  # Stop codon (U는 일반적으로 사용되지 않지만, 여기서 TGA를 사용)
    'V': 'GTT',  # Valine
    'W': 'TGG',  # Tryptophan
    'X': 'TAA',  # Stop codon (X는 stop codon을 나타냄)
    'Y': 'TAC',  # Tyrosine
    'Z': 'GAA',  # Glutamic Acid (임의의 할당)
    ' ': 'TAA',  # Stop codon to represent space
}


##################################################################################################


# 코돈에서 문자로 역변환하기 위한 사전 생성
reverse_codon_map = {v: k for k, v in codon_map.items()}

def translate_dna_to_text(dna_sequence):
    # 1. DNA 염기서열을 코돈 단위로 나누기
    codons = [dna_sequence[i:i+3] for i in range(0, len(dna_sequence), 3)]

    # 2. 각 코돈을 문자로 변환 (코돈이 3개 염기로 완성된 경우에만 변환)
    text = ""
    for codon in codons:
        if len(codon) == 3:
            if codon in reverse_codon_map:
                text += reverse_codon_map[codon]
            else:
                text += '?'  # 알 수 없는 코돈 처리 (에러 방지용)
        else:
            text += '?'  # 불완전한 코돈 처리 (에러 방지용)

    return text

    

##################################################################################################


# 사용자로부터 DNA 염기서열 입력받기
user_input = input("Enter a DNA sequence (multiple of 3 nucleotides): ").upper()
translated_text = translate_dna_to_text(user_input)
print(f"Translated text: {translated_text}")
    

##################################################################################################






#재미로 보는 내이름 아미노산 성격표


# 🔬 아미노산 정보 사전 
codon_analysis = {
    'GCT': ("알라닌", "근육 생성", "기초 체력형 / 묵묵히 버팀"),
    'AAT': ("아스파라긴", "신경 안정", "평화형 / 갈등 피함"),
    'TGC': ("시스테인", "항산화 역할", "내면 강한 안정형 / 감정 기복 적음"),
    'GAT': ("아스파르트산", "에너지 대사", "분석형 / 이성적 사고"),
    'GAG': ("글루탐산", "신경 전달", "감각형 / 예민하고 섬세"),
    'TTT': ("페닐알라닌", "도파민 생성", "열정형 / 감정 표현 적극"),
    'GGT': ("글라이신", "콜라겐 구성", "온순형 / 부드럽고 유연"),
    'CAT': ("히스티딘", "면역 기능", "보호형 / 방어력 강함"),
    'ATA': ("아이소류신", "근육 회복", "운동형 / 회복력 좋음"),
    'ATC': ("아이소류신", "근육 회복", "운동형 / 회복력 좋음"),
    'AAA': ("라이신", "성장 촉진", "성장형 / 목표 지향적"),
    'CTG': ("류신", "단백질 합성", "리더형 / 주도적"),
    'ATG': ("메티오닌", "세포 회복", "재생형 / 조용히 영향력 있음"),
    'AAC': ("아스파라긴", "신경 안정", "평화형 / 갈등 피함"),
    'CCG': ("프롤린", "피부 탄력", "유지형 / 안정적 지속"),
    'CCT': ("프롤린", "피부 탄력", "유지형 / 안정적 지속"),
    'CAA': ("글루타민", "면역 조절", "중재형 / 조율 능력"),
    'CGT': ("아르기닌", "혈관 확장", "창의형 / 도전 좋아함"),
    'AGT': ("세린", "대사 효소", "실용형 / 계획적"),
    'ACC': ("트레오닌", "면역/대사", "균형형 / 흐름 조절 잘함"),
    'TGA': ("스탑코돈", "단백질 종료", "정리형 / 마무리 잘함"),
    'GTT': ("발린", "근육 에너지", "활동형 / 에너지 넘침"),
    'TGG': ("트립토판", "세로토닌 생성", "감성형 / 예술·창의 중시"),
    'TAC': ("티로신", "기분 조절", "직관형 / 상황 인지력 높음"),
    'TAA': ("스탑코돈", "문장 구분", "정리형 / 휴식 중요시")

}

# 🔡 알파벳 → 코돈 변환 규칙
codon_map = {
    'A': 'GCT', 'B': 'AAT', 'C': 'TGC', 'D': 'GAT', 'E': 'GAG',
    'F': 'TTT', 'G': 'GGT', 'H': 'CAT', 'I': 'ATA', 'J': 'ATC',
    'K': 'AAA', 'L': 'CTG', 'M': 'ATG', 'N': 'AAC', 'O': 'CCG',
    'P': 'CCT', 'Q': 'CAA', 'R': 'CGT', 'S': 'AGT', 'T': 'ACC',
    'U': 'TGA', 'V': 'GTT', 'W': 'TGG', 'X': 'TAA', 'Y': 'TAC',
    'Z': 'GAA', ' ': 'TAA',
}
    

##################################################################################################



# DNA 서열을 3글자 단위 코돈으로 나누기
codons = [dna_sequence[i:i+3] for i in range(0, len(dna_sequence), 3)]

# 결과 출력
print("\n📜 나의 유전자 성격표")
print("=" * 50)
for codon in codons:
    aa, function, personality = codon_analysis.get(codon, ("❓ 알 수 없음", "-", "-"))
    print(f"[{codon}] ➜ {aa} | {function} | {personality}")



##################################################################################################

# 1. 카운트
aa_counter = Counter()
for codon in codons:
    aa, _, _ = codon_analysis.get(codon, ("❓ 알 수 없음", "-", "-"))
    if aa != "❓ 알 수 없음":
        aa_counter[aa] += 1

# 2. 상위 3개 추출
top_3 = aa_counter.most_common(3)

# 3. 성격 포함된 상세 정보 구성
top_3_detailed = []
for aa, count in top_3:
    for codon, (aa_name, _, personality) in codon_analysis.items():
        if aa_name == aa:
            top_3_detailed.append((aa, count, personality))
            break

# 4. 출력
print("\n🏆 가장 많이 등장한 유전자 TOP 3")
print("=" * 50)
for aa, count, personality in top_3_detailed:
    print(f"- {aa}: {count}회 등장 / {personality}")


##################################################################################################
